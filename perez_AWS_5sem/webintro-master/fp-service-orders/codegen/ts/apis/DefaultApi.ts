/* tslint:disable */
/* eslint-disable */
/**
 * FP Order service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    TeaOrder,
    TeaOrderFromJSON,
    TeaOrderToJSON,
    TeaSpot,
    TeaSpotFromJSON,
    TeaSpotToJSON,
    TeaType,
    TeaTypeFromJSON,
    TeaTypeToJSON,
} from '../models';

export interface ListOrdersRequest {
    spotId?: string;
    startTime?: string;
    endTime?: string;
    page?: number;
}

export interface ListSpotsRequest {
    tea?: string;
}

/**
 * no description
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * List of tea types to order
     */
    async listOrdersRaw(requestParameters: ListOrdersRequest): Promise<runtime.ApiResponse<Array<TeaOrder>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.spotId !== undefined) {
            queryParameters['spotId'] = requestParameters.spotId;
        }

        if (requestParameters.startTime !== undefined) {
            queryParameters['startTime'] = requestParameters.startTime;
        }

        if (requestParameters.endTime !== undefined) {
            queryParameters['endTime'] = requestParameters.endTime;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tea/orders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TeaOrderFromJSON));
    }

    /**
     * List of tea types to order
     */
    async listOrders(requestParameters: ListOrdersRequest): Promise<Array<TeaOrder>> {
        const response = await this.listOrdersRaw(requestParameters);
        return await response.value();
    }

    /**
     * List of tea cafe and tea spot places
     */
    async listSpotsRaw(requestParameters: ListSpotsRequest): Promise<runtime.ApiResponse<Array<TeaSpot>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.tea !== undefined) {
            queryParameters['tea'] = requestParameters.tea;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tea/spots`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TeaSpotFromJSON));
    }

    /**
     * List of tea cafe and tea spot places
     */
    async listSpots(requestParameters: ListSpotsRequest): Promise<Array<TeaSpot>> {
        const response = await this.listSpotsRaw(requestParameters);
        return await response.value();
    }

    /**
     * List of tea types to order
     */
    async listTeaTypesRaw(): Promise<runtime.ApiResponse<Array<TeaType>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tea/types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TeaTypeFromJSON));
    }

    /**
     * List of tea types to order
     */
    async listTeaTypes(): Promise<Array<TeaType>> {
        const response = await this.listTeaTypesRaw();
        return await response.value();
    }

}
