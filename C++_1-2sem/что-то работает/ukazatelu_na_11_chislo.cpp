1. Пусть   
	const n=10;
	int a[n]={-1, -2, 33, 44, -5, -6, 77, 8};
	int *q;

Какие из следующих присваиваний допустимы и что они означают:

1) q=a; просто указатель на массив (на его первый элемент)

2) q=*a[0]; недопустимо 

3) q=n; недопустимо

4) q=&a[0]; также просто указатель на первый элемент массива

5)  int i=2; q=&a[i]; указатель на 3й элемент массива

6) int i=2; q=a[i]; недопустимо

7)   q=a[0];  недопустимо

8)  q=&a[n]; недопустимо (как указатель на нуль-терминал)





=====================================================================


2.     Дано описание функции: 

    void Fun (int *x, int N,  int &S)
          {   S=0;        
                  for (int i=0; ; )

                      {  S+=x[i++];
                         if (x[i]==0  || i ==N ) 
                         return;   
                      } 
         }

                  /*    или 

     void Fun (int *x, int N,  int &S)

      {   S=0;   for (int i=0; i<N-1; )    if (x[++i]>0) S+=x[i];                          }   */

В каких строках правильно вызвана функция? Что будет выведено для правильных вариантов?

 int main( ) {   const n=10;   int a[n]= {11, -2, 30, 44, -5, 66,  0, 8, 99};  
 
    int &Sum1;   Fun (a,n,Sum1);  cout<<endl<<Sum1;                   //1 не верно - &Sum1

    int  Sum2;   Fun (&a[0],n/2,Sum2);  cout<<endl<<Sum2;             //2 верно  - 78

    int  Sum3;   Fun (a,n,Sum3);  cout<<endl<<Sum3;                   //3 верно 144

    int Sum4;  Fun (&a[5], 5, Sum4);  cout<<endl<<Sum4;               //4 верно 66

    int *Sum5; Fun (a,n,Sum5);cout<<endl<<Sum5;                       //5 не верно

    int *q=a[5], Sum6=0; Fun(q, n/2, Sum6);  cout<<endl<<Sum6;        //6 не верно

    int *q=a[n/2], Sum7=0; Fun(q, 5, Sum7);cout<<endl<<Sum7;          //7 не верно

   int *q=&a[n/2], Sum8=0; Fun(q, 5, Sum8);  cout<<endl<<Sum8;        //8 верно 66

  int *q=*a[n/2], Sum9=0; Fun(q, 5, Sum9);   cout<<endl<<Sum9;        //9 не верно

  getch();        return 0;        }



  ===================================================================

3. Описана функция:

void OutChar (int *a, int N, int k)

{  cout<< endl;

  for (int i=0; i<N; i++) 
  printf("%d  %c  %c", a[i], a[i], (i+1)%k ? '\n': ' ' );   }

Какие из следующих вызовов правильные?  Что будет выведено для правильных вариантов?    

 main(){  const n=10; int k=5;  int a[n]= {48, 49,50,51, 52, 53, 54, 55, 56, 57};

 OutChar (a,n,k);          /* 1 */ прав - выведет индексы и элементы массива с переносами на новые строки, ктоме эл-тов 50 и 55 - их через пробел                    

 OutChar(&a[0], k,k/2);    /* 2 */  прав - выведет k элементов с переносами на новую строку, кроме эл-тов, кратных двум - там через пробел                        

 OutChar( a[0], k, n);     /* 3 */  не прав - a[0] - не адресного типа                                

 OutChar(a[0], n, k);      /* 4 */  не прав -  a[0] - не адресного типа                 
 
 OutChar(a, k, n);         /* 5 */  прав - выведет k элементов с переносами на новую строку, кроме эл-тов, кратных десяти                                

 OutChar(&a[k], k,k/2);    /* 6 */ прав - начнет выводить эл-ты с переносами на новую строку, кратных двум - там через пробел, начиная с k+1(номер, а не индекс), 

 OutChar (a,2*k,k);        /* 7 */ прав - выведет индексы и элементы массива с переносами на новые строки, ктоме эл-тов 50 и 55 - их через пробел

 OutChar(*a[0], n, k);     /* 8 */ не прав - *a[0] - не адресного типа
       getch();       }





===================================================================



4. Описана функция:

int MyFun (int *x, int n)

{ по некоторому алгоритму для  одномерного массива x размерности n получаем и возвращаем одно целое число}

Как эту функцию без изменений использовать для получения и (или) вывода 

этого же параметра в каждой строке статической матрицы,  объявленной так:

const n=4,m=6;  int A[n][m];?

 т.е  для получения и (или) вывода n чисел, по одному для каждой строки? Выбери правильные варианты ответов:

1) for(int i=0;i<n;i++)    MyFun( M[i], m); НЕТ число получит (возвратит), но не выведет,

2) for(int i=0;i<n;i++)    cout<<MyFun( M[i], m)<<” “; ДА 

3) for(int i=0;i<m;i++)    cout<<MyFun( M[i],  n)<<” “; НЕТ (n - не то, что нам надо)

4) for(int i=0;i<n;i++)   { r=MyFun(&M[i][0], m);  cout<<r<<” “;} ДА

5) for(int i=0;i<m;i++)   { r=MyFun(&M[i][0], n);  cout<<r<<” “;} НЕТ (n - не то, что нам надо)

6) for(int i=0;i<n;i++)    cout<<MyFun( M[i][0], m)<<” “; нет адреса (&M[i][0])

7) for(int i=0;i<n;i++)   { r=MyFun(M[i][0], m);  cout<<r<<” “;} НЕТ





===================================================================






5.  Дан код:

 const size2=6;

void Sort1(int X[],int n);

void MyOut(int M[][size2],int n,int m)

{ cout<<endl; 
for(int i=0;i<n;i++)
    {cout<<endl;
    for(int j=0;j<m;j++)
    printf("%4d ",M[i][j]);
    }        
cout<<endl;      
}

  void Sortmatr1(int M[][size2],int n,int m);



   int main()   {const n=3,m=6;  int A[n][size2]={  …  }  ;

     Sortmatr1(A,  n,  m);
     cout<<endl;
     MyOut (A, n, m);
     getch();
     return 0;

}

void Sort1(int X[], int m)

{  int min, Nmin;       for(int k=0;k<m-1;k++)

                                {      min=X[k]; Nmin=k;

                                       for (int j=k;j<m;j++)

                                            if(X[j]<min)   {  min=X[j]; Nmin=j;  }

                                      X[Nmin]=X[k];      X[k]=min;

                                }

  }

void Sortmatr1(int M[][size2],int n,int m)

  {  for(int i=0;i<n;i++)     Sort1( M[i]   ,m);

  }

1) Что будет выведено в результате выполнения этой программы?

2) Какие элементы матрицы и как будут рассортированы, если в функции Sortmatr1 записать:

a)    for (int i=0; i<n; i+=2)  Sort1(M[i], k/2);?

b)    for (int i=0; i<n; i+=2)  Sort1(&M[i][к/2], k);?



===================================================================





6. Дан код:

const size2=6;         int Sum(int *X, int );              //1

void Sum2(int M[][size2],int ,int, int &, int & );         //2

void MyOut(int *x, int n)                                  //3

{cout<<endl;       for(int i=0;i<n;i++)

                         printf("%5d%c", x[i], (i+1)%size2?' ':'\n'); } //4

int main() 

 {const n=4,m=6;  int A[n][size2]=

                              { {4,  -3, 2, 0, 5},     {-11,  2,  3},

                                 {5,  -6,  4},            {-2,  4, 3, -2,1, 5}   }, S1, S2;

      MyOut (A[0],n*m);                                                                     //5

      Sum2(A,n,m,S1, S2);      cout<<endl<<S1<<"   "<< S2;      //6

     getch();       return 0;       }

int Sum(int X[],int m)                                                                  //7

{  int S=0; for(int j=0; j<m; j++) if (X[j]>0)  S+=X[j];        return S;         }

   void Sum2 (int M[][size2],int n,int m, int &S1, int &S2)            //8

    {    S1= Sum(M[0] ,n*m/2);                                                        //9

  S2=Sum(&M[2][0], n*m/2);      }                                    //10

В каких строках есть ошибки? Если ошибок нет, что будет выведено?


===================================================================




7. Дан код:

   int *p1= new int = 20;   
   
   int *p2; *p2= new int [20];  

   int *p3= new int[20]={11, 2, 30, -44, -5, 6, 7, 0, 8, 99, 100};

   int *p4; p4= new int[20];

   int *p5= new int (20); 

   int *p6= new (int) 20;
 
   int *p7= new int :20; 

Для каких указателей (p1 — p6) правильно резервируется память для одномерного массива из 20 целых чисел?

p4   

===================================================================



8. Дан код:  

 float  *f1= new float[4];  delete[]float;

 float  *f2= new float[4];  delete[]f2;

 float  *f3= new float[4];  delete float [4];

 float  *f4= new float[4];  delete f4;

Для каких переменных правильно освобождается память для одномерного массива?.

f2

===================================================================




9. Пусть const n=5;    int ar[n]={-1, 2, 33,4, -5} ; Объясните результат выполнения следующих циклов:

a) for (p=ar, i=0; p+i<=ar+size-1; i++) printf (“%d   “, *(p+i)); просто выведутся эл-ты массива

b) for (p=ar, i=0; p+i<=ar+size-1; p++, i++) printf (“%d   “, *(p+i)); выведутся эл-ты массива c индексами через 1, начиная с a[0]

c) for (p=ar+size-1; p>=ar; p--) cout<<p<<”  “<<*p<<endl; - выведутся эл-ты массива с последнего по первый
===================================================================




10. Дан код:    int A[5]={0,1,2,3};                                                    //1

                 for (int *p = A+4; p>A; p--)    cout<<(*p)<<"  ";    //2

Что будет выведено? 

Варианты ответов: 1) 3  2  1  0        2) 0  3  2  1      3) 0  1  2  3  0 

     4)  0  3  2  1  0   5) ошибка (указать, в какой строке).



 2, а не 4, ибо пока p>A, т е p>A[0]
===================================================================


 

11. Дан код: 

const n=5;    int a[n]={-1, 2, 33,4, -5} ;

 int *p=a,s=0;      for (; p<a+n; p++)  s+=*p;                                         //0

 int *p1=&a[0];    for ( int s1=0; p1<= &a[n-1]; p1=p1+1)  s1=s1+*p1;                  //1

 int *p2,s2;           for ( p2=a, s2=0; *p2<a[n-1];  p2++)  s2+=*p2;                  //2 ошибка - *p2<a[n-1] - значение вместо адреса

 int *p3,  s3=0;    for ( p3=a;  p3<&a[n-1];  p3++,  s3+=*p3);                         //3

 int *p4,  s4=0;    for ( p4=a;  p4<a+n;  s4+=*p4, p4++  );                            //4 p4<a+n; - выходим за рамки возможного

Среди строк //1 — //4 найти такие синтаксически правильные строки, которые выполняются так, как операторы в строке //0



1    3    
===================================================================






12. Дан код:  

    const n=5;    int a[n]={-1, 2, 33,4},  *p ;        //1

           for (p=a; p<=a+n-1; p+=2)                           //2

               cout<<p<<"   "<<(*p)<<"   ";                  //3               

Что будет выведено? Если есть ошибки, указать, в каких строках.


===================================================================




13. Дан код: 

                const n=3; int A[n][n]={{1,2,3},{4,5},{6,7}}, *p;

                 for (p=A[n-1];  p>A[0]; p-=(n-1))    cout<<(*p)<<"  ";

Что будет выведено?



===================================================================




14. Дан код:

                    const n=3; int A[n][n]={{1,2,3},{-4,-5},{6,7}}, *p;

                    for (p=A[n-1];  *p>=*A[0]; p-=(n-1))    cout<<(*p)<<"  ";

Что будет выведено? Если есть ошибки, объяснить их.



===================================================================



15. Дан код:

          const n=4, m=3; int A[n][m]={{1,2,3},{4,5,6},{5}, {0, 22}}, *p1,*p2, S;

                   for (p1=A[0];  p1<=A[n-1]; p1++)

                           { S=0;  for (p2=p1; p2<p1+m;  p2++)  S+=(*p2);          cout<<S<<"  ";     }

Что будет выведено? Если есть ошибки,  объяснить их.



===================================================================



16.    Дан код:

const n=4, m=3; int A[n][m]={{1,2,3},{4,5,6},{5}, {0, 22}}, *p1,*p2, S;

                       for (p1=A[0];  p1<=A[n-1]; p1+=m)

                { S=0;  for (p2=p1; p2<=p1+m;  p2+=2)  S+=(*p2);       cout<<S<<"  ";             }

Что будет выведено? Если есть ошибки, объяснить их.